pub struct Memory {
    ram: [u8; 4096],
}
const FONTS: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

impl Memory {
    pub fn new() -> Memory {
        let mut new_mem = Memory { ram: [0; 4096] };
        new_mem.ram[0..80].copy_from_slice(&FONTS[0..80]);

        new_mem
    }

    pub fn get_instruction(&self, addr: u16) -> u16 {
        let left = (self.ram[addr as usize] as u16) << 8;
        let right = self.ram[(addr + 1) as usize] as u16;
        left | right
    }
    pub fn get_byte(&self, addr:u16) -> u8{
        self.ram[addr as usize]
    }

    pub fn set(&mut self, addr: usize, val: u8) {
        self.ram[addr] = val
    }

    pub fn load(&mut self, data: Vec<u8>) {
        self.ram[0x200..(0x200 + data.len())].copy_from_slice(&data);
    }
}
